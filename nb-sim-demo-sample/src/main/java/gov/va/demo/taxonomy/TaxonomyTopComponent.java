/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.va.demo.taxonomy;

import gov.va.demo.fx.concept.ConceptNodeScene;
import java.net.URL;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.util.Callback;
import org.ihtsdo.taxonomy.items.Item;
import org.ihtsdo.taxonomy.model.ItemFactory;
import org.ihtsdo.taxonomy.model.TaxonomyModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//gov.va.demo.taxonomy//Taxonomy//EN",
autostore = false)
@TopComponent.Description(preferredID = "TaxonomyTopComponent",
iconBase = "gov/va/demo/taxonomy/node.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "gov.va.demo.taxonomy.TaxonomyTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TaxonomyAction",
preferredID = "TaxonomyTopComponent")
@Messages({
    "CTL_TaxonomyAction=Taxonomy",
    "CTL_TaxonomyTopComponent=Taxonomy Window",
    "HINT_TaxonomyTopComponent=This is a Taxonomy window"
})
public final class TaxonomyTopComponent extends TopComponent implements ChangeListener<TaxonomyModel> {

    public TaxonomyTopComponent() {
        initComponents();
        setName(Bundle.CTL_TaxonomyTopComponent());
        setToolTipText(Bundle.HINT_TaxonomyTopComponent());


        Platform.runLater(new Runnable() {

            @Override
            public void run() {
                try {
                    URL resource = getClass().getResource("/gov/va/demo/taxonomy/TaxonomyScene.fxml");
                    FXMLLoader loader = new FXMLLoader(resource);
                    Parent root = (Parent) loader.load();
                    taxonomyScene = (TaxonomyScene) loader.getController();
                    taxonomyTree = taxonomyScene.getTreeView();
                    TreeItem<String> topItem = new TreeItem<String>("");
                    taxonomyTree.setRoot(topItem);
                    Scene s = new Scene(root);
                    jFXPanel1.setScene(s);
                } catch (Exception e) {
                    Exceptions.printStackTrace(e);
                }
            }
        });


    }
    TreeView taxonomyTree;
    TaxonomyScene taxonomyScene;

    @Override
    public void changed(ObservableValue<? extends TaxonomyModel> ov, TaxonomyModel t, TaxonomyModel t1) {
        taxonomyTree.setCellFactory(new Callback<TreeView<Item>, TreeCell<Item>>() {

            @Override
            public TreeCell<Item> call(TreeView<Item> list) {
               return new TaxonomyTreeCell();
            }
        });
        taxonomyTree.setShowRoot(false);
        taxonomyTree.setRoot(t1.getRoot());
        ov.removeListener(this);

        taxonomyTree.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
        Platform.runLater(new Runnable() {

            @Override
            public void run() {
                taxonomyScene.getConceptVBox().getChildren().add(new ConceptNodeScene(taxonomyTree));
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFXPanel1 = new javafx.embed.swing.JFXPanel();

        javax.swing.GroupLayout jFXPanel1Layout = new javax.swing.GroupLayout(jFXPanel1);
        jFXPanel1.setLayout(jFXPanel1Layout);
        jFXPanel1Layout.setHorizontalGroup(
            jFXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFXPanel1Layout.setVerticalGroup(
            jFXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javafx.embed.swing.JFXPanel jFXPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        Platform.runLater(new Runnable() {

            @Override
            public void run() {
                TaxonomyStartupTask tst = new TaxonomyStartupTask();
                tst.valueProperty().addListener(getThis());
                
                FutureHelper.addFuture(ItemFactory.taxonomyExecutors.submit(tst));
            }
        });
    }
    
    TaxonomyTopComponent getThis() {
        return this;
    }
    

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
