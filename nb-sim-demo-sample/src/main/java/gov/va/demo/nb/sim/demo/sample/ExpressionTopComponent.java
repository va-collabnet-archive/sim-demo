/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.va.demo.nb.sim.demo.sample;

import gov.va.demo.dom.DomExpressionAdapter;
import gov.va.demo.expression.ExpressionManager;
import gov.va.demo.fx.ExpressionTreeCell;
import gov.va.demo.fx.TreeHelper;
import gov.va.demo.nb.sim.jpa.Expressions;
import gov.va.demo.nb.sim.jpa.JpaManager;
import gov.va.sim.act.expression.ExpressionComponentBI;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import gov.va.sim.impl.expression.Expression;
import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TreeCell;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.util.Callback;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.Query;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//gov.va.demo.nb.sim.demo.sample//Expression//EN",
autostore = false)
@TopComponent.Description(preferredID = "ExpressionTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "gov.va.demo.nb.sim.demo.sample.ExpressionTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ExpressionAction",
preferredID = "ExpressionTopComponent")
@Messages({
    "CTL_ExpressionAction=Expression",
    "CTL_ExpressionTopComponent=Expression Window",
    "HINT_ExpressionTopComponent=This is an Expression window"
})
public final class ExpressionTopComponent extends TopComponent {

    private Expression expression;
    private File assertionDefFile;
    private Document assertionDoc;

    public File getAssertionDefFile() {
        return assertionDefFile;
    }

    public void setAssertionDefFile(File assertionDefFile) {
        this.assertionDefFile = assertionDefFile;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            assertionDoc = builder.parse(new FileInputStream(assertionDefFile));
        } catch (ParserConfigurationException parserConfigurationException) {
            Exceptions.printStackTrace(parserConfigurationException);
        } catch (SAXException sAXException) {
            Exceptions.printStackTrace(sAXException);
        } catch (IOException iOException) {
            Exceptions.printStackTrace(iOException);
        }
    }

    public ExpressionTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExpressionTopComponent());
        setToolTipText(Bundle.HINT_ExpressionTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);

        Platform.runLater(new Runnable() {

            @Override
            public void run() {
                try {
                    URL resource = getClass().getResource("/gov/va/demo/nb/sim/demo/sample/ExpressionTree.fxml");
                    Parent root = FXMLLoader.load(resource);

                    Scene s = new Scene(root);
                    jFXPanel1.setScene(s);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });


    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        processButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        expressionTextArea = new javax.swing.JTextArea();
        checkElIndex = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        elConceptNid = new javax.swing.JTextField();
        expressionUuidTextField = new javax.swing.JTextField();
        inTableText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        elConceptUuid = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        addToExpressionTableButton = new javax.swing.JButton();
        jFXPanel1 = new javafx.embed.swing.JFXPanel();

        setBackground(javax.swing.UIManager.getDefaults().getColor("Tree.textBackground"));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(processButton, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.processButton.text")); // NOI18N
        processButton.setActionCommand(org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.processButton.actionCommand")); // NOI18N
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeExpressionButtonActionPerformed(evt);
            }
        });

        expressionTextArea.setColumns(20);
        expressionTextArea.setLineWrap(true);
        expressionTextArea.setRows(5);
        jScrollPane1.setViewportView(expressionTextArea);

        jScrollPane4.setViewportView(jScrollPane1);

        org.openide.awt.Mnemonics.setLocalizedText(checkElIndex, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.checkElIndex.text")); // NOI18N
        checkElIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkElIndexActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.jLabel2.text")); // NOI18N

        elConceptNid.setEditable(false);
        elConceptNid.setText(org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.elConceptNid.text")); // NOI18N
        elConceptNid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elConceptNidActionPerformed(evt);
            }
        });

        expressionUuidTextField.setEditable(false);
        expressionUuidTextField.setText(org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.expressionUuidTextField.text")); // NOI18N
        expressionUuidTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expressionUuidTextFieldActionPerformed(evt);
            }
        });

        inTableText.setEditable(false);
        inTableText.setText(org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.inTableText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.jLabel3.text")); // NOI18N

        elConceptUuid.setEditable(false);
        elConceptUuid.setText(org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.elConceptUuid.text")); // NOI18N
        elConceptUuid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elConceptUuidActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addToExpressionTableButton, org.openide.util.NbBundle.getMessage(ExpressionTopComponent.class, "ExpressionTopComponent.addToExpressionTableButton.text")); // NOI18N
        addToExpressionTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToExpressionTableButtonActionPerformed(evt);
            }
        });

        jFXPanel1.setBackground(new java.awt.Color(255, 255, 0));
        jFXPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jFXPanel1.setMinimumSize(new java.awt.Dimension(257, 166));

        javax.swing.GroupLayout jFXPanel1Layout = new javax.swing.GroupLayout(jFXPanel1);
        jFXPanel1.setLayout(jFXPanel1Layout);
        jFXPanel1Layout.setHorizontalGroup(
            jFXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jFXPanel1Layout.setVerticalGroup(
            jFXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inTableText))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel2))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(elConceptUuid, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(elConceptNid, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(checkElIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(expressionUuidTextField))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                                    .addComponent(jFXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(addToExpressionTableButton))))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFXPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(expressionUuidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elConceptNid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(elConceptUuid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkElIndex)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inTableText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addToExpressionTableButton)
                .addContainerGap(186, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void makeExpressionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeExpressionButtonActionPerformed
        try {
            String expressionText = expressionTextArea.getText();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new ByteArrayInputStream(expressionText.getBytes("UTF-8")));
            expression = DomExpressionAdapter.convertToExpression(doc);

            expressionUuidTextField.setText(expression.getUuid().toString());

            Platform.runLater(new Runnable() {

                @Override
                public void run() {
                    try {
                        TreeItem rootItem = TreeHelper.makeTreeItems(expression);
                        TreeView<ExpressionComponentBI> tv = ExpressionTree.trees.get(0);
                        tv.setCellFactory(new Callback<TreeView<ExpressionComponentBI>, TreeCell<ExpressionComponentBI>>() {

                            @Override
                            public ExpressionTreeCell call(TreeView<ExpressionComponentBI> list) {
                                return new ExpressionTreeCell();
                            }
                        });
                        ExpressionTree.trees.get(0).setRoot(rootItem);
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            });

        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_makeExpressionButtonActionPerformed

    private void checkElIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkElIndexActionPerformed
        if (expression != null) {
            try {
                Integer cnid = ExpressionManager.getCnid(expression);
                elConceptNid.setText(cnid.toString());
                elConceptUuid.setText(ExpressionManager.getElConceptUuid(expression).toString());

            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            } catch (NoSuchAlgorithmException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_checkElIndexActionPerformed

    private void elConceptNidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elConceptNidActionPerformed
    }//GEN-LAST:event_elConceptNidActionPerformed

    private void expressionUuidTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expressionUuidTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expressionUuidTextFieldActionPerformed

    private void elConceptUuidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elConceptUuidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_elConceptUuidActionPerformed

    private void updateExpressionTableInfo() {
        if (expression != null) {
            EntityManager em = JpaManager.getEntityManager();

            try {
                Query countEuuidQuery = em.createNamedQuery("Expressions.countEuuid");
                countEuuidQuery.setParameter("euuid", expression.getUuid().toString());
                List obs = countEuuidQuery.getResultList();
                long count = (Long) obs.get(0);
                if (count > 0) {
                    inTableText.setText("true");
                    addToExpressionTableButton.setEnabled(false);
                } else {
                    inTableText.setText("false");
                    addToExpressionTableButton.setEnabled(true);
                }
                System.out.println("Count: " + count);


            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            } catch (NoSuchAlgorithmException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

    }

    private void addToExpressionTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToExpressionTableButtonActionPerformed
        if (expression != null) {
            EntityManager em = JpaManager.getEntityManager();

            try {

                EntityTransaction entr = em.getTransaction();
                entr.begin();
                Expressions expressionObj = new Expressions();
                expressionObj.setCnid(ExpressionManager.getCnid(expression));
                expressionObj.setEuuid(expression.getUuid().toString());
                expressionObj.setExpression(expression.getXml());
                em.persist(expressionObj);
                entr.commit();

                updateExpressionTableInfo();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            } catch (NoSuchAlgorithmException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_addToExpressionTableButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToExpressionTableButton;
    private javax.swing.JButton checkElIndex;
    private javax.swing.JTextField elConceptNid;
    private javax.swing.JTextField elConceptUuid;
    private javax.swing.JTextArea expressionTextArea;
    private javax.swing.JTextField expressionUuidTextField;
    private javax.swing.JTextField inTableText;
    private javafx.embed.swing.JFXPanel jFXPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton processButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
