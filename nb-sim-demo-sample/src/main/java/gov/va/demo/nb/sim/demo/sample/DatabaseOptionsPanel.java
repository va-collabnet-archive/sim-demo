/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.va.demo.nb.sim.demo.sample;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.prefs.Preferences;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.stage.FileChooser;
import javax.swing.DefaultListModel;
import org.apache.commons.io.FileUtils;
import org.ihtsdo.tk.api.TerminologyStoreDI;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbPreferences;

final class DatabaseOptionsPanel extends javax.swing.JPanel {

    private final DatabaseOptionsOptionsPanelController controller;

    DatabaseOptionsPanel(DatabaseOptionsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
        System.out.println("Started DatabaseOptionsPanel");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectBdbLocationButton = new javax.swing.JButton();
        bdbLocationLabel = new javax.swing.JLabel();
        bdbLocationTextField = new javax.swing.JTextField();
        baselineFilesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        baselineFileList = new javax.swing.JList();
        selectBaselineFiles = new javax.swing.JButton();
        rebuildButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(selectBdbLocationButton, org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.selectBdbLocationButton.text")); // NOI18N
        selectBdbLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBdbLocationButtonActionPerformed(evt);
            }
        });

        bdbLocationLabel.setLabelFor(bdbLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(bdbLocationLabel, org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.bdbLocationLabel.text")); // NOI18N

        bdbLocationTextField.setText(org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.bdbLocationTextField.text")); // NOI18N
        bdbLocationTextField.setToolTipText(org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.bdbLocationTextField.toolTipText")); // NOI18N
        bdbLocationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdbLocationTextFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(baselineFilesLabel, org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.baselineFilesLabel.text")); // NOI18N

        baselineFileList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(baselineFileList);

        org.openide.awt.Mnemonics.setLocalizedText(selectBaselineFiles, org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.selectBaselineFiles.text")); // NOI18N
        selectBaselineFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBaselineFilesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(rebuildButton, org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.rebuildButton.text")); // NOI18N
        rebuildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rebuildButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bdbLocationLabel)
                        .addGap(18, 18, 18)
                        .addComponent(bdbLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(baselineFilesLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rebuildButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(selectBaselineFiles, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectBdbLocationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectBdbLocationButton)
                    .addComponent(bdbLocationLabel)
                    .addComponent(bdbLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(baselineFilesLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectBaselineFiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(rebuildButton)
                .addGap(133, 133, 133))
        );

        bdbLocationLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DatabaseOptionsPanel.class, "DatabaseOptionsPanel.jLabel2.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void selectBdbLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBdbLocationButtonActionPerformed


            Platform.runLater(new Runnable() {

                @Override
                public void run() {
                    FileChooser fc = new FileChooser();
                    System.out.println("Filters: " + fc.getExtensionFilters());
                    fc.setTitle("Select Berkeley-DB Folder...");
                    fc.getExtensionFilters().add(
                            new FileChooser.ExtensionFilter("Filter for bdb properties", "*.properties"));
                    File f = fc.showOpenDialog(null);
                    if (f != null) {
                        try {
                            bdbLocationTextField.setText(f.getCanonicalPath());
                            controller.changed();
                        } catch (IOException ex) {
                            Exceptions.printStackTrace(ex);
                        }
                    }
                }
            });
        
    }//GEN-LAST:event_selectBdbLocationButtonActionPerformed

    private void bdbLocationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdbLocationTextFieldActionPerformed
        controller.changed();
    }//GEN-LAST:event_bdbLocationTextFieldActionPerformed

    private void selectBaselineFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBaselineFilesActionPerformed
       

            Platform.runLater(new Runnable() {

                @Override
                public void run() {
                    FileChooser fc = new FileChooser();
                    System.out.println("Filters: " + fc.getExtensionFilters());
                    fc.setTitle("Select baseline eConcept files...");
                    fc.getExtensionFilters().add(
                            new FileChooser.ExtensionFilter("Select baseline eConcept files",
                            new String[]{"*.jbin", "*.econ"}));
                    List<File> fl = fc.showOpenMultipleDialog(null);

                    if (fl != null) {
                        DefaultListModel listModel = new DefaultListModel();
                        for (File f : fl) {
                            listModel.addElement(f);
                        }
                        baselineFileList.setModel(listModel);
                        controller.changed();
                    }
                }
            });
        
    }//GEN-LAST:event_selectBaselineFilesActionPerformed

    private void rebuildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rebuildButtonActionPerformed
        Preferences dbPreferences = NbPreferences.forModule(TerminologyStoreDI.class);
        String dbLoc = dbPreferences.get(
                TerminologyStoreDI.DatabaseOptionPreferences.DB_LOCATION.name(), "");
        if (dbLoc == null || dbLoc.isEmpty()) {
            
            if (bdbLocationTextField.getText().isEmpty()) {
                bdbLocationTextField.setText("berkeley-db");
            } 
            dbPreferences.put(TerminologyStoreDI.DatabaseOptionPreferences.DB_LOCATION.name(), 
                    bdbLocationTextField.getText());
            dbLoc = dbPreferences.get(
                TerminologyStoreDI.DatabaseOptionPreferences.DB_LOCATION.name(), "berkeley-db");
        }
        
        
        if (dbLoc != null && !dbLoc.isEmpty()) {
            try {
                FileUtils.deleteDirectory(new File(dbLoc));
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        
        TerminologyStoreDI ts = Lookup.getDefault().lookup(TerminologyStoreDI.class);
        if (ts != null) {
            DefaultListModel listModel = (DefaultListModel) baselineFileList.getModel();
            if (!listModel.isEmpty()) {
                File[] econFiles = new File[listModel.size()];
                for (int i = 0; i < econFiles.length; i++) {
                    econFiles[i] = (File) listModel.getElementAt(i);
                }
                try {
                    ts.loadEconFiles(econFiles);
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }
            }

        } else {
            System.out.println("Lookup cannot find TerminologyStoreDI.class");
        }
    }//GEN-LAST:event_rebuildButtonActionPerformed

    void load() {
        Preferences dbPreferences = NbPreferences.forModule(TerminologyStoreDI.class);
        // Berkeley db directory
        bdbLocationTextField.setText(dbPreferences.get(
                TerminologyStoreDI.DatabaseOptionPreferences.DB_LOCATION.name(),
                bdbLocationTextField.getText()));

        // Baseline file list
        String baselineFileListStr = dbPreferences.get(
                TerminologyStoreDI.DatabaseOptionPreferences.BASELINE_FILES.name(),
                "");
        DefaultListModel listModel = new DefaultListModel();
        String[] baselineFileStrs = baselineFileListStr.split("\t");
        for (String bfs : baselineFileStrs) {
            if (!bfs.isEmpty()) {
                File f = new File(bfs);
                listModel.addElement(f);
            }
        }
        baselineFileList.setModel(listModel);

    }

    void store() {
        // Berkeley db directory
        Preferences dbPreferences = NbPreferences.forModule(TerminologyStoreDI.class);
        dbPreferences.put(TerminologyStoreDI.DatabaseOptionPreferences.DB_LOCATION.name(), bdbLocationTextField.getText());

        // Baseline file list
        int size = baselineFileList.getModel().getSize();
        StringBuilder fileProperty = new StringBuilder();
        for (int i = 0; i < size; i++) {
            File f = (File) baselineFileList.getModel().getElementAt(i);
            try {
                fileProperty.append(f.getCanonicalPath());
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
            if (i < size - 1) {
                fileProperty.append("\t");
            }
        }
        dbPreferences.put(TerminologyStoreDI.DatabaseOptionPreferences.BASELINE_FILES.name(),
                fileProperty.toString());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList baselineFileList;
    private javax.swing.JLabel baselineFilesLabel;
    private javax.swing.JLabel bdbLocationLabel;
    private javax.swing.JTextField bdbLocationTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton rebuildButton;
    private javax.swing.JButton selectBaselineFiles;
    private javax.swing.JButton selectBdbLocationButton;
    // End of variables declaration//GEN-END:variables
}
